{\rtf1\ansi\ansicpg1252\deff0\deflang1033{\fonttbl{\f0\fswiss\fcharset0 Arial;}}
{\*\generator Msftedit 5.41.15.1515;}\viewkind4\uc1\pard\f0\fs20 ==================================MAGICIAN README==================================\par
\par
First of all I want to thank you for giving my module, Magician, a try. I wrote this module as a test of my knowledge of Dante and PHP. The command I initially set out to make when I started this was $passport, now renamed $store. This readme is an explanation of what's in the module.\par
\par
~~Store~~\par
The store command idea originated from an experiment I and someone else were doing with Contra.. The idea was to get the bot to be able to change logins without having to change the config.ini file or rather open it and do it manually. The module he wrote was for Contra and it's name Jackal.. Mine is for Dante. The commands that store deals with aren't very difficult to comprehend. here's how to use it. \par
\par
First, we'll start with a list of all the commands. $store [logins | login | manual] [ add | del/remove | change | list | all ]. The second bracket are the commands $store logins deal with. $store logins allows you to add, delete, change and list logins. The command is designed to store alternate account information to a file numbered in chronological order to when they were added. $store logins add allows you to add a login to the file (which it will create on its own) and it adds a username and password, and generates the number based on which one comes next. It starts at 0 and goes up. If it successfully adds the login, it will say to you that it was successful and tell you what number it is. If you type $store logins list, it will display all the usernames you have stored and their ID number. $store logins all will list all teh usernames \i and \i0 passwords. you have to type $store logins all confirm. It's set that way so you don't inadvertently show all of your accounts and passwords in whatever chatroom you're using this in. I highly recommend you only use these commands in either a private (closed) chatroom or you chat the bot, for obvious reasons. An example of its use would be $store logins add myaccountname password. You can also just type the username and it will ask you to enter the password in the bot window (helps keep it secure). $store logins change allows you to change the password for a specified username's ID. So myaccountname would be ID 0, the command would be $store logins change 0 newpass. Again, you can leave the password blank and it will ask you to put it into the bot window. It's useful for if you have to change your password for whatever reason. $store logins del/remove works with either del or remove. It simply takes the ID# you specify and deletes it from the database. $store logins del 0 would remove myaccountname in this example. If you have a few logins, lets say 8 stored on the bot, and you remove #4, it will delete ID# 4 and then move the rest of the logins DOWN one number to fill the space. So ID 8 is now ID 7. This is to prevent it from making any holes. $store logins list simply displays all teh logins you have stored and lists their numer as such. \par
ID# 0 myaccountname | ID# 1 anotheraccount and so on. Don't use $store logins all confirm unless you need to see the passwords each account has associated with them (which would be helpful if you don't remember whether or not you updated the password for a certain account). And for an added safety measure against people who have users in the owner privclass on their bot, all of these commands are set up to only work with the bot's actual owner, you. Now for the command that uses these stored logins. $store login is the command you use to tell the bot which login to change to. Continuing the example, you would type $store login 0 and it will login as myaccountname, and it will look to see if there is a username and password stored under this ID#. If it exists, it will say "ID accepted. Changing logins, please wait." Assuming you have the correct password stored, it will then disconnect, and if it was succesful in getting the authtoken (what dAmn uses in place of passwords), it will then join all of the rooms you have stored in the autojoin as the account listed under the ID#. If it fails to grab the token for whatever reason (bad password, possibly you misspelled the username, or something is wrong with the file?), it will come back as the original account you set it up for when you installed the bot. If for some reason, it doesn't come back, look at the bot window, and see what it's saying. It might tell you it had a bad password and needs confirmation to continue, OR if it's constantly saying connected, join error, couldn't join as '' not privileged, it means the account you are telling it to use is dAmn banned. (Best not to try and use that account, it won't work. :P). and finally, there is $store manual. $store manual allows you to, instead of using the stored accounts, input a seperate username and password. Same as before, you can leave the password blank and it will ask you to put it in the bot window. An example of its use would be $store manual myaccountname password. When you hit enter in the chatroom, it will tell you it's changing logins, please wait, then like with store login, it will disconnect and rejoin as the account you specified (reguardless of whether any info you sent was invalid, it will disconnect.) NOTE: If it fails, it returns the BOT's config file back to its original state. This is a safety measure because while testing, when it failed and came back, it would freeze and stop responding if the authtoken stored didn't go with the username. Again, if you can't remember what ID you want to use, use $store logins list to view all the accounts you have stored first. These are all the commands associate with the $store command.\par
\par
~~Show~~\par
The show command again involves login information, but this time, rather than use it to change what the bot is logged in as, it will display the authtoken, or cookie depending on what you tell it to display. \par
\par
The list of commands are $show [ logins | token | cookie] [ list | grab | manual]. $show logins only works if you type $show logins list. It's the exact same command as $store logins list. I won't explain much about this module as if you don't know what authtokens do, are for, or how to use them, the commands are useless. Cookie is essentially what the authtoken is stored in. I strongly suggest you don't use these in public chatrooms. Anyone with enough knowledge and the right tools (and if they're bad enough) can use this information to steal your account. $show token grab is almost the same as $store login but with a distinct difference. You type $show token grab 0 and it will grab myaccountname's authtoken and display it, rather than use it to login as myaccount name. $show cookie grab does the exact same thing as $show token grab, only it displays the whole (encoded) cookie. Do not under any circumstances use these commands in a public chatroom especially if you don't know what they are used for. $show token/cookie manual is the same as $store manual. Allows you to manually input a username and password to grab the authtoken/cookie. Unless you know what you're doing with these, I suggest you leave the $show command commented out (disabled). Using this command to get another user to display their authtoken/cookie in a PUBLIC chat room is against chat and site rules and if you're caught especially if the other user loses their account, you will be banned from the network, regardless of your intent when doing so. \par
\par
This concludes the explanation of the commands included with the module. The others are explained well enough built in.  Again, thank you for giving this module a look. It certainly isn't a n00b tool so if you aren't a somewhat experienced bot user, I don't recommend you use this.\par
IF YOU HAVE ANY PROBLEMS OR CONCERNS ABOUT THIS MODULE, note me at http://wizard-kgalm.deviantart.com.\par
}
 